local rendercam = require "rendercam.rendercam"
local vp = rendercam.viewport

local IDENTITY_MATRIX = vmath.matrix4()
local CLEAR_COLOR = hash("clear_color")
local WINDOW_RESIZED = hash("window_resized")
local UPDATE_WINDOW = hash("update window")

local res_fac = 4;

local function update_window(self)
  -- local rgba_params = {format = render.FORMAT_RGBA,width = render.get_window_width() / res_fac,height = render.get_window_height() / res_fac}
  -- local depth_params = { format = render.FORMAT_DEPTH,width = render.get_window_width() / res_fac,height = render.get_window_height() / res_fac}
  -- local target_params = {[render.BUFFER_COLOR_BIT] = rgba_params , [render.BUFFER_DEPTH_BIT] = depth_params}
  -- self.pp_game_world = render.render_target("pp_gameWorld",target_params)

  local rgba_params = {format = render.FORMAT_RGBA,width = render.get_window_width(),height = render.get_window_height()}
  local depth_params = { format = render.FORMAT_DEPTH,width = render.get_window_width(),height = render.get_window_height()}

  local target_params = {
    [render.BUFFER_COLOR0_BIT] = rgba_params, [render.BUFFER_DEPTH_BIT] = depth_params
  }
  self.pp_game_world = render.render_target("pp_gameWorld",target_params)
  
	rendercam.update_window(render.get_window_width(), render.get_window_height())
	self.gui_proj = vmath.matrix4_orthographic(0, rendercam.window.x, 0, rendercam.window.y, -1, 1)
end

function init(self)
	self.gui_pred = render.predicate({"gui"})
	self.text_pred = render.predicate({"text"})
	self.model_pred = render.predicate({"model"})
	self.particle_pred = render.predicate({"particle"})
	self.post_processing_pred = render.predicate({"post_processing"})

	self.clear_color = vmath.vector4()
	self.clear_color.x = sys.get_config("render.clear_color_red", 0)
	self.clear_color.y = sys.get_config("render.clear_color_green", 0)
	self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
	self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

	rendercam.configWin.x = render.get_width();  rendercam.configWin.y = render.get_height()
	rendercam.update_window_size(render.get_window_width(), render.get_window_height())
	update_window(self)
end

function update(self)
  
  render.set_render_target(self.pp_game_world)
  render.set_stencil_mask(0xff)
  render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

  render.set_viewport(vp.x, vp.y, vp.width, vp.height)

  -- Model rendering
  render.set_depth_mask(true)
  render.set_view(rendercam.calculate_view())
  render.set_projection(rendercam.calculate_proj())

  render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
  render.disable_state(render.STATE_CULL_FACE)
  render.enable_state(render.STATE_DEPTH_TEST)
  render.set_depth_mask(true)
  render.draw(self.model_pred)

  -- Debug rendering - physics debug, draw_line
  render.disable_state(render.STATE_DEPTH_TEST)
  render.disable_state(render.STATE_CULL_FACE)
  render.draw_debug3d()

  -- Post-Process rendering
  render.disable_state(render.STATE_BLEND)
  render.disable_state(render.STATE_STENCIL_TEST)
  render.disable_render_target(self.pp_game_world)
  render.enable_texture(0, self.pp_game_world, render.BUFFER_COLOR0_BIT)
  
  render.draw(self.post_processing_pred)
  render.disable_texture(0)

  -- GUI Rendering
  render.set_viewport(0, 0, rendercam.window.x, rendercam.window.y)
  render.set_view(IDENTITY_MATRIX)
  render.set_projection(self.gui_proj) -- gui_proj only calculated on update_window

  render.enable_state(render.STATE_STENCIL_TEST)
  render.draw(self.gui_pred)
  render.draw(self.text_pred) -- Includes debug text from "draw_text" messages.
  render.disable_state(render.STATE_BLEND)
  render.disable_state(render.STATE_STENCIL_TEST)
end

function on_message(self, message_id, message)
	if message_id == CLEAR_COLOR then
		self.clear_color = message.color
	elseif message_id == WINDOW_RESIZED then -- sent by engine
		update_window(self)
	elseif message_id == UPDATE_WINDOW then -- sent by rendercam when a camera is activated ("window_resized" engine message requires data)
		update_window(self)
	end
end
